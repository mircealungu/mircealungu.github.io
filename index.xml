<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mircea Lungu</title>
    <link>https://mircealungu.github.io/index.xml</link>
    <description>Recent content on Mircea Lungu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016 Mircea F Lungu</copyright>
    <lastBuildDate>Sun, 27 Nov 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Time to Learn </title>
      <link>https://mircealungu.github.io/project/time-to-learn/</link>
      <pubDate>Sun, 27 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mircealungu.github.io/project/time-to-learn/</guid>
      <description>&lt;p&gt;Softwarenaut is built on top of the Cincom distribution of Smalltalk for historical reasons. This means that in order to run the tool you also need Cincom Smalltalk. There are three ways in which you can install the tool.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Nominated for the Teacher of the Year Award!</title>
      <link>https://mircealungu.github.io/post/16-11-20-teacher-of-the-year/</link>
      <pubDate>Sun, 20 Nov 2016 12:00:00 +0000</pubDate>
      
      <guid>https://mircealungu.github.io/post/16-11-20-teacher-of-the-year/</guid>
      <description>&lt;p&gt;I have been nominated for the teacher of the year award!
I consider this an honor that I do not deserve personally,
especially seeing all the other nominations. However, it is also
true that together with my team, we put a lot of effort in
  coming up with cool project ideas and
  running them
in the timespan of five months.
The (vast majority of the) students reported enjoying team work on real projects and
learning a lot in the process.&lt;/p&gt;

&lt;p&gt;Thus, many thanks and congratulations for my teaching assistants:
Laura Baakman,
Jeroen Brandsma,
Georgios Digkas,
Sybren Gjaltema,
Jelle van Wezel,
Angelo Karountzos,
Alexander Lukjanenkovs.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been long due to write up the lessons learned during
the most recent software engineering courses.
Now I feel the duty to do it even more.
Hopefully before I start the next batch!&lt;/p&gt;

&lt;p&gt;And now for the impossible challenge: can you spot me in the picture?
&lt;img src=&#34;https://mircealungu.github.io/img/teacher.jpg&#34; alt=&#34;lala&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Paper: Polite Programmers, Use Sentence Case @ NOOL&#39;16</title>
      <link>https://mircealungu.github.io/post/16-11-20-polite-smalltalk-at-nool/</link>
      <pubDate>Sun, 20 Nov 2016 12:00:00 +0000</pubDate>
      
      <guid>https://mircealungu.github.io/post/16-11-20-polite-smalltalk-at-nool/</guid>
      <description>&lt;p&gt;The programming languages reseachers have a healthy sense of humor. The -1th edition of the NOOL (New Object Oriented Languages) Workshop had a very creative call for papers. To keep up with the state of affairs, Jan Kurs and I submitted a paper with a most concise abstract:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;JavaProgrammersUseCamelCaseToSeparateWordsInIdentifiers. &lt;br/&gt;
   Pythonistas_and_others_use_underscore_in_their_identifiers. &lt;br/&gt;
   Polite programmers can use spaces if they like.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The paper presents briefly some of the design decisions that went into Polite, our evolutionary mutation of Smalltalk that brings the language
closer to natural language. (&lt;a href=&#34;https://github.com/mircealungu/Polite_Programmers__NOOL16/blob/master/preprint.pdf&#34;&gt;preprint is online&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Further Work on Polite Smalltalk:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To try out Polite Smalltalk, &lt;a href=&#34;https://zenodo.org/record/61578#.WDYtDKIrKXQ&#34;&gt;Download the latest release from Zenodo&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to Data Science Course - Kick Off</title>
      <link>https://mircealungu.github.io/post/16-11-16-introduction-to-data-science-course/</link>
      <pubDate>Wed, 16 Nov 2016 12:00:00 +0000</pubDate>
      
      <guid>https://mircealungu.github.io/post/16-11-16-introduction-to-data-science-course/</guid>
      <description>&lt;p&gt;Today we are starting our new course on Introduction to Data
Science with &lt;a href=&#34;http://www.cs.rug.nl/~kbunte/&#34;&gt;Kerstin Bunte&lt;/a&gt;.
This is going to be a very interesting challenge since we have
60 first year master students from multiple disciplines:
computer science, astronomy, and mathematics. What do they have
in common? What can we talk about that they can all benefit from
while not being too easy nor too challenging? We&amp;rsquo;ll see!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title> Evolutionary and Collaborative Software Architecture Recovery with Softwarenaut</title>
      <link>https://mircealungu.github.io/publication/zeeguu/</link>
      <pubDate>Mon, 10 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mircealungu.github.io/publication/zeeguu/</guid>
      <description>&lt;p&gt;More detail can easily be written here using &lt;em&gt;Markdown&lt;/em&gt; and $\rm \LaTeX$ math code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Paper: Bootstrapping an Ubiquitous Ecosystem @ WEA&#39;16</title>
      <link>https://mircealungu.github.io/post/16-09-20-bootstrapping-an-ubiquitous-ecosystem/</link>
      <pubDate>Tue, 20 Sep 2016 12:00:00 +0000</pubDate>
      
      <guid>https://mircealungu.github.io/post/16-09-20-bootstrapping-an-ubiquitous-ecosystem/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;An unconventional idea for an ecosystem, which shows well that there are many more opportunities to benefit from the ecosystem idea, than the various industrial applications. The concrete examples of the platform and the applications make the ideas tangible and well understandable. I particularly like the discussions of the lessons learned [&amp;hellip;]&amp;rdquo; (a reviewer for the paper :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I loved that review!&lt;/p&gt;

&lt;p&gt;I was happy to hear that my paper on Bootstrapping a Ubiquitous Monitoring Ecosystem (&lt;a href=&#34;https://github.com/mircealungu/Bootstrapping_an_Ecosystem__WEA16/blob/master/preprint.pdf&#34;&gt;preprint online&lt;/a&gt;) was accepted for presentation at WEA (Workshop on Ecosystem Architectures) that will take place in Copenhagen and is colocated with ECSA.&lt;/p&gt;

&lt;p&gt;The paper talks about some of the challenges and
opportunities that come with bootstrapping a
ubiquitous monitoring ecosystem. It is a case
study inspired from our &lt;a href=&#34;https://zeeguu.unibe.ch&#34;&gt;Zeeguu&lt;/a&gt; project.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Zeeguu</title>
      <link>https://mircealungu.github.io/project/zeeguu/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mircealungu.github.io/project/zeeguu/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Polite</title>
      <link>https://mircealungu.github.io/project/polite/</link>
      <pubDate>Mon, 27 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://mircealungu.github.io/project/polite/</guid>
      <description>&lt;p&gt;Polite Smalltalk is a small evolutionary mutation of the Smalltalk programming language that aims to encourage developers to think more about their programs as prose. The main mechanism by which Polite does this is what we define here as {\em sentence case identifiers} &amp;mdash; a naming convention that allows spaces in identifier names. Unlike projection editors which can easily allow spaces in their identifiers, Polite programs are stored as text.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tool: Softwarenaut</title>
      <link>https://mircealungu.github.io/post/15-01-20-tool-softwarenaut/</link>
      <pubDate>Tue, 20 Jan 2015 12:00:00 +0000</pubDate>
      
      <guid>https://mircealungu.github.io/post/15-01-20-tool-softwarenaut/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;[&amp;hellip;] supports architecture recovery through interactive exploration and visualization. Interactive exploration, filtering and contextual details, are enhanced with evolutionary capabilities when versioning information is available. The tool allows sharing and discovering the results of previous analysis sessions through a global repository of architectural views indexed by systems.&amp;rdquo; (Lungu et al., &lt;a href=&#34;http://scg.unibe.ch/scgbib?query=Lung14a&amp;amp;display=abstract&#34;&gt;Evolutionary and Collaborative Software Architecture Recovery with Softwarenaut&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;aggregating-low-level-relations-along-a-hierarcical-decomposition-of-a-system&#34;&gt;Aggregating low-level relations along a hierarcical decomposition of a system&lt;/h3&gt;

&lt;p&gt;Softwarenaut aggregates low-level relations along a hierarcical decomposition of a system (e.g. the package structure in Java). Softwarenaut can thus present a high-level overview of the architectural relationships between the modules in a system.&lt;/p&gt;

&lt;p&gt;The figure presents the architecture of Softwarenaut visualized in Softwarenaut. The module sizes are proportional to their LOC and the relationships are proportional to the number of low-level relationships abstracted.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/464519/21022444/eb463a12-bd7c-11e6-9a37-f6925f371eff.png&#34; alt=&#34;architecture-of-softwarenaut&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;augmenting-the-big-picture-with-evolutionary-information&#34;&gt;Augmenting The Big Picture With Evolutionary Information&lt;/h3&gt;

&lt;p&gt;The following view presents Softwarenaut visualizing itself but this time, augmenting the structure with evolutionary information. On top of the architectural view we have highlighted the classes that have the most activity in the recent evolution of the system (as of February 2011). One can see that it is a minority of classes that have been changing.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/464519/21022349/9ec2f748-bd7c-11e6-87ad-29c5332caba9.png&#34; alt=&#34;evolution screenshot&#34; /&gt;&lt;/p&gt;

&lt;!-- ### Details About Relationship Evolution

The following figure presents the evolution filmstrip for the relationship between the uml and kernel modules in ArgoUML between 2003 and 2007. Inheritance relationships are represented with red and invocation relationships are represented with black. One can see that in 2004 a reverse dependency was introduced between kernel and uml and it remained in the system until its latest analyzed version

![screen-shot-2011-10-10-at-5 27 36-pm](https://cloud.githubusercontent.com/assets/464519/21023545/4c41a97e-bd81-11e6-81b1-fb038bd3b156.png)
 --&gt;

&lt;h3 id=&#34;details-about-module-evolution&#34;&gt;Details About Module Evolution&lt;/h3&gt;

&lt;p&gt;There are mahy module detail views which present information about a particular module. The Module Evolution presents a compressed version of the module history. The module is represented in every analyzed version as a treemap. When a new class is introduced it is marked with yellow. When a class changes it is colored with a shade of blue which is darker for larger changes. The figure presents the history of the cognitive package in ArgoUML.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/464519/21023626/9cffc058-bd81-11e6-906f-4f62c440717a.png&#34; alt=&#34;screen-shot-2011-10-14-at-1 56 14-am&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;coping-with-the-explosion-of-information-through-filtering&#34;&gt;Coping with the explosion of information through filtering&lt;/h3&gt;

&lt;p&gt;Filters help coping with the explosion of information during exploration. There are two types of filters: entity filters and relationship filters. The Filters Panel allows the user to add and remove various filters during exploration. The filters panel appears instead of the Detail Panel when no entity is selected in the Architectural View.&lt;/p&gt;

&lt;p&gt;Two categories of &lt;strong&gt;entity filters&lt;/strong&gt; are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Size Related: Filters all the modules that are under a certain threshold (Small Modules) or above a certain threshold (Large modules).&lt;/li&gt;
&lt;li&gt;Evolution Related:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Two categories of &lt;strong&gt;relationship filters&lt;/strong&gt; are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dependency Strength: they filters the relationships based on the number of low-level explicit relationships that are abstracted in the visible relationships (e.g. Weak dependencies, Strong dependencies). These are useful when starting the analysis of systems that have a large number of modules and dependencies between them.&lt;/li&gt;
&lt;li&gt;Evolutionary: they filter relationships based on the evolution of the relationships during the lifetime of the system. Examples are: lifetime, newborn, old, new. They are available only when multiple versions of a system are loaded. They are useful for either limiting the amount of information at the first encounter with a system (e.g. lifetime) or trying to find problems (e.g. newborn combined with bidirectional).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;a-screencast-of-softwarenaut-in-action&#34;&gt;A Screencast of Softwarenaut in Action&lt;/h3&gt;

&lt;p&gt;In 2012 I prepared a screencast of the way the
tool looked at the time. I think screencasts are very important
for research tools since they may give ideas to new toolmakers
long after they tool does not compile anymore :)&lt;/p&gt;

&lt;iframe src=&#34;https://player.vimeo.com/video/62767181&#34; width=&#34;640&#34; height=&#34;360&#34; frameborder=&#34;0&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;h3 id=&#34;for-further-reading-see-our-article-from-2014&#34;&gt;For Further Reading See Our Article from 2014&lt;/h3&gt;

&lt;p&gt;The description on this page is a summary of the details presented in our article:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://scg.unibe.ch/archive/papers/Lung14a.pdf&#34;&gt;Evolutionary and Collaborative Software Architecture Recovery with Softwarenaut&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To cite the article, use the following bibtex:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;@article{Lung14a,
    Annote = {internationaljournal},
    Author = {Mircea Lungu and Michele Lanza and Oscar Nierstrasz},
    Doi = {10.1016/j.scico.2012.04.007},
    Journal = {Science of Computer Programming},
    Medium = {2},
    Number = {0},
    Pages = {204 - 223},
    Peerreview = {yes},
    Publisher = {Elsevier},
    Title = {Evolutionary and Collaborative Software Architecture Recovery with {Softwarenaut}},
    Volume = {79},
    Year = {2014}}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;installation&#34;&gt;Installation&lt;/h1&gt;

&lt;p&gt;Softwarenaut is built on top of the Cincom distribution of Smalltalk for historical reasons. This means that in order to run the tool you also need Cincom Smalltalk.&lt;/p&gt;

&lt;p&gt;To download the source code you need to have an installation of Cincom VisualWorks. It seems that recently the only way you can do that is by ordering a CD from Cincom. They are very quick in sending it, but it is still a nuissance and a very archaic way of distributing software! Once you have your VisualWorks installed you are ready to download the sources.&lt;/p&gt;

&lt;p&gt;Connecting to the Bern Store&lt;/p&gt;

&lt;p&gt;In the Store menu of the launcher, choose ’Connect to Repository’. A dialog pops up where you have to fill in information for connecting to a Store database. Provide the following information:&lt;/p&gt;

&lt;p&gt;Interface: select PostgreSql from the dropdown box
Environment: db.iam.unibe.ch:5432_scgStore
User Name: storeguest (if you have one, use it)
Password: storeguest (if you have one, use it)&lt;/p&gt;

&lt;p&gt;To access the SCG Store do the following: in the Store menu of the launcher: Store -&amp;gt; Published Items.&lt;/p&gt;

&lt;p&gt;Once there, load the MetaDBDevelopment bundle followed by the SoftwarenautDevelopment bundle. Every time you are asked to select a prerequisite, select the latest version that is available. (You can avoid clicking through a zillion of Ok&amp;rsquo;s if you go to Settings&amp;gt;Store&amp;gt;Prerequisites and select the &amp;ldquo;Load latest version&amp;hellip;&amp;rdquo; option.)&lt;/p&gt;

&lt;h3 id=&#34;importing-a-system&#34;&gt;Importing a System&lt;/h3&gt;

&lt;p&gt;In order to make Softwarenaut independent of the language that your system is written in, we have made it work on an intermediate representation that can work with any object-oriented language. That representation is the FAMIX meta-model.&lt;/p&gt;

&lt;p&gt;There are a few ways in which you can obtain a FAMIX model of your system:&lt;/p&gt;

&lt;p&gt;For Smalltalk systems, the importer is in the same image with Softwarenaut
Using a third-party tool that can analyze your source-code and export it into FAMIX
Importing a system from the SourcererDB (work in progress)
Download one of the sample systems that are available online (work in progress)&lt;/p&gt;

&lt;p&gt;When you run Softwarenaut, it runs out of a Smalltalk &amp;ldquo;image&amp;rdquo;, a full smalltalk system whose source code co-exists with that of Softwarenaut and is interpreted by a Smalltalk VM. This means that the tool has access to its own source code together with a few other thousand classes that make up a basic Smalltalk distribution.&lt;/p&gt;

&lt;p&gt;You can import and analyze any system from smalltalk by selecting the menu option Import-&amp;gt;From Smalltalk&amp;hellip;&lt;/p&gt;

&lt;p&gt;Once you select the option, you are presented with a list of namespaces that you can import. One special namespace is SN - the namespace of the Softwarenaut itself. If you load it you can analyze the system with itself.&lt;/p&gt;

&lt;h3 id=&#34;importing-multiple-versions&#34;&gt;Importing Multiple Versions&lt;/h3&gt;

&lt;p&gt;Softwarenaut provides also multi-version analysis support. For this one needs to have multiple models of the same system.&lt;/p&gt;

&lt;p&gt;To load multiple models of the same system for multi-version analysis choose the option File&amp;gt;Import History of FAMIX (2.1) Models and in the pop-up dialog select a directory where you have already prepared models for several versions of the system that you are analyzing.&lt;/p&gt;

&lt;p&gt;Warning: For large systems, importing a single version can take a few minutes. Consequently importing multiple versions will take proportionally more time. This means that you want to keep the number of versions that you analyze small. Select the versions that you want to analyze accordingly.&lt;/p&gt;

&lt;p&gt;Once all your versions are loaded, you are presented with a Model History builder. From the left panel select the versions that constitute your history and add them to the right panel. Then select &amp;ldquo;Build History&amp;rdquo; and give a name to your history (usually the name of the system).&lt;/p&gt;

&lt;p&gt;After this Softwarenaut builds the internal hierarchical graphs for every version and you are ready to proceed to analysis. The models for all the versions will now know that they are part of the same history.&lt;/p&gt;

&lt;p&gt;Multi-Version views will be enabled in the detail view tab. One such example is the Relationship Evolution detail view for dependencies.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title> Evolutionary and Collaborative Software Architecture Recovery with Softwarenaut</title>
      <link>https://mircealungu.github.io/publication/softwarenaut/</link>
      <pubDate>Fri, 10 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://mircealungu.github.io/publication/softwarenaut/</guid>
      <description>&lt;p&gt;More detail can easily be written here using &lt;em&gt;Markdown&lt;/em&gt; and $\rm \LaTeX$ math code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Softwarenaut </title>
      <link>https://mircealungu.github.io/project/softwarenaut/</link>
      <pubDate>Sun, 27 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://mircealungu.github.io/project/softwarenaut/</guid>
      <description>&lt;p&gt;Softwarenaut is built on top of the Cincom distribution of Smalltalk for historical reasons. This means that in order to run the tool you also need Cincom Smalltalk. There are three ways in which you can install the tool.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Visualizing Stack Overflow @ SSE&#39;13</title>
      <link>https://mircealungu.github.io/post/13-09-01-visualizing-stack-overflow/</link>
      <pubDate>Wed, 20 Nov 2013 12:00:00 +0000</pubDate>
      
      <guid>https://mircealungu.github.io/post/13-09-01-visualizing-stack-overflow/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://mircealungu.github.io/img/stackoverflow.png&#34; alt=&#34;visualizing-stack-overflow&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;&amp;ldquo;A nobel prize is waiting for the one who visualizes the economy
of information&amp;rdquo;&lt;/b&gt; (Steward Brand, Inventing the Future at MIT)&lt;/p&gt;

&lt;p&gt;One of my current travelling companions is “The Media Lab – Inventing the Future at MIT” by Steward Brand. Like several other books about the history of computing in the 80s, this one is also fascinating and it shows again how much ahead of their time were people in those years… and how we are still reaping the ideas that they saw. The book reports on an anecdote by Harlan Cleveland :&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“I have wanted for some time to find a map of information flows around the world. The other day I had one hour to kill between appointments in new york city, so I dropped into the Rand-McNally shop to ask for such a map. My request created quite a stir, and virtually every employee was called into consultation. They brought out all sorts of maps showing flows of food and feedgrains, oil and coal, weapons and manufacturers – but finally admitted that they had no map of information flows and didn’t think their competitors had one either.” (Steward Brand, Inventing the Future at MIT, pp. 245)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Can we make maps of information flow in the world today? In the article about StackOverflow that we will present at SSE in Saint Petersburg this summer we show that we can at least map components of this information transfer, in our particular case software engineering knowledge.&lt;/p&gt;

&lt;h3 id=&#34;every-map-has-it-own-story&#34;&gt;Every Map has it Own Story&lt;/h3&gt;

&lt;p&gt;Dennis Schenk is a master student in our group and he is working on Quicksilver, an infrastructure for visualizing hierarchical graphs. Software systems are the classical subject for such a tool since they are naturally organized as hierarchical graphs. Nevertheless, we wanted the infrastructure independent of this individual use case, so we looked for something else to visualize. Something that would be “hierarchical graph”-y but not software.&lt;/p&gt;

&lt;p&gt;We found StackOverflow.&lt;/p&gt;

&lt;p&gt;The StackOverflow database, of which dumps are publicly available, contains information about how knowledge is transferred between users in the form of questions and answers. Since a large number of users have provided their geolocation information in their profiles we can build a hierarchical graph of this data and visualize it with Quicksilver. We grabbed a public dump of the SO data curated by Alberto Bacchellii and Luca Ponzanelli at the University of Lugano.&lt;/p&gt;

&lt;h3 id=&#34;our-map-of-the-known-so-world&#34;&gt;Our Map of the (Known SO) World&lt;/h3&gt;

&lt;p&gt;With this data we created the map of the flow of knowledge in the world through StackOverflow as a medium.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://mircealungu.github.io/img/stackoverflow-full.png&#34; alt=&#34;stackoverflow-full&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The map is built using the following conventions:
- Countries and continents are represented using treemaps. Their areas are proportional to the aggregated reputation received by their corresponding users. One can see that UK contributes ten times more information than Switzerland
- The arrows indicate the flow of information between continents. The thickness of an arrow is proportional to the number of answers. One can see that Australia imports three times more information than it exports.&lt;/p&gt;

&lt;p&gt;Several observations on this map:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;America and Europe are the main contributors&lt;/li&gt;
&lt;li&gt;Small countries like Switzerland or Sweden have disproportionately high reputation&lt;/li&gt;
&lt;li&gt;China is almost invisible even if Joel &lt;a href=&#34;https://stackoverflow.blog/2011/04/stack-overflow-around-the-world/&#34;&gt;reports&lt;/a&gt; a large number of visits from China.&lt;/li&gt;
&lt;li&gt;Africa does not contribute much&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The map is taken from our paper (&lt;a href=&#34;http://scg.unibe.ch/archive/papers/Sche13a-GeolocatingStackOverflow.pdf&#34;&gt;pdf&lt;/a&gt;, &lt;a href=&#34;http://scg.unibe.ch/scgbib?_k=dvvBNH0e&amp;amp;query=Sche13a&amp;amp;display=bibtex&#34;&gt;Bibtex&lt;/a&gt;) which contains more details about the data collection and analysis (including details on geo-locating users, and the evolution over time of the data).&lt;/p&gt;

&lt;p&gt;If you read it we would love to get your feedback in the comments section of this blog entry.&lt;/p&gt;

&lt;p&gt;In the meantime think about the following questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Could the SO Knowledge Flow map be representative of the way computing knowledge is distributed in the world? What does it say about our world?&lt;/li&gt;
&lt;li&gt;Could the fact that SO is in English be the main reason for US and UK to be so much ahead of the other countries in terms of reputation?&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
