<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Post-rsses on Mircea Lungu</title>
    <link>https://mircealungu.github.io/post/index.xml</link>
    <description>Recent content in Post-rsses on Mircea Lungu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016 Mircea F Lungu</copyright>
    <lastBuildDate>Fri, 06 Jan 2017 12:00:00 +0000</lastBuildDate>
    <atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>The Essentiality of Context in Software Analytics</title>
      <link>https://mircealungu.github.io/post/17-01-06-essentiality-of-context/</link>
      <pubDate>Fri, 06 Jan 2017 12:00:00 +0000</pubDate>
      
      <guid>https://mircealungu.github.io/post/17-01-06-essentiality-of-context/</guid>
      <description>

&lt;p&gt;I am preparing a talk for the SE symposium.
This is the yearly meeting of the SE researchers
in the Netherlands. Since this is one of the first
times that I get the chance to talk in front of the
community, I&amp;rsquo;d like to report on some of the work
that I&amp;rsquo;ve been involved in doing. Thus, I spent some
time thinking about ways in which I can look
at my past work to present it in a cohesive way.&lt;/p&gt;

&lt;p&gt;One perspective that I have found is arguing about
the usefulness of taking the context into account
in software analytics.&lt;/p&gt;

&lt;p&gt;I paste below the transcript of my talk for those
who will have not been able to attend.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;what-is-software-analytics&#34;&gt;What is Software Analytics?&lt;/h1&gt;

&lt;p&gt;Let me tell you the story of my students whom I asked once what do they prefer to be reading: the source code of ArgoUML or &lt;em&gt;War and Peace&lt;/em&gt;. It turns out that they don&amp;rsquo;t want to read either. I guess they prefer to be writing their own ode, and tweet their own tweets. Millenials&amp;hellip;&lt;/p&gt;

&lt;p&gt;Truth is, nobody wants to read so much source code. Thus, one of the goals of software analytics is to automatically extract a high-level view of a software system. To help us gather insights into a given software system.&lt;/p&gt;

&lt;p&gt;One of my favorite science fiction writers is Vernor Vinge. He is a retired computer science professor from California. One really memorable book that he wrote is A Deepness in the Sky. One of the quotations in that book is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nobody knew what the system was doing. 
the programmers were long time dead. 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is where we are going with the software. There is alreday nobody that can
understand the full stack of software that is running on a single machine&amp;hellip;&lt;/p&gt;

&lt;p&gt;This is where software analytics comes into the picture.&lt;/p&gt;

&lt;p&gt;But let me tell you one more story.
There was this movie called Moneyball that some of you have seen.
In it we see how the domain of baseball discovers the knapsack problem.
They discover that their old approach of greedy heuristic in selecting
a soccer team is inferior to an approach which finds a global optimum
by selecting a team instead of individual players.&lt;/p&gt;

&lt;p&gt;A few years ago already, I was attending a conference where a software
producer was showing a demo of the analytics software they provide to
their soccer team partners. They track every individual characteristic
of all the players in play, in order to discover the best combinations
of players, and data mine their own teams and the other teams&lt;/p&gt;

&lt;p&gt;One of my friends works in finance, and they have been heavily applying
data analysis on the information from the italian Guardia di Financia in
order to detect people who are evading taxes. It seems that their project
has been cancelled half-way through&amp;hellip; which you can interpret in multiple
ways.&lt;/p&gt;

&lt;p&gt;In 2014, more than 75% of the stock traded in the US was traded by automated
trading systems.&lt;/p&gt;

&lt;p&gt;In a world where software empowers and makes possible the optimization
of all these other domains, we need to make sure that the domain of
building software itself is not left behding, especially since software
is underlying all these other domains.&lt;/p&gt;

&lt;h1 id=&#34;who-am-i&#34;&gt;Who Am I?&lt;/h1&gt;

&lt;p&gt;I have been working for several years in the domain of software
analytics. I am currently working for the University of Groningen
as assistant professor in the SEARCH research group. Before joinig
the kingdon of the north here in groningen, I was with the University
of Bern in Switzerland, and with the University of Lugano, also in
Switzerland.&lt;/p&gt;

&lt;p&gt;Today, in the next half an hour, I would like to
show to you a few of the things that we can do if we set out to
consider software to be the subject of our analytics.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;(tangential)
 When I started working in this domain, about 10 years ago, I started working with Radu Marinescu on detection strategies. These were formulas for detecting problems in software systems. They were smart formulas, and they encoded a lot of individual expertise. They would tell you when a class was not good enough based on thresholds and metrics. My diploma thesis was to discover a way of softening those thresholds. I introduced what was called Fuzzy Detection Strategies which would be using Fuzzy logic&amp;hellip;&lt;/p&gt;

&lt;h1 id=&#34;the-most-basic-insight-in-software-analytics&#34;&gt;The Most Basic Insight in Software Analytics?&lt;/h1&gt;

&lt;p&gt;The most basic insight in software analytics is as new as the Lisp programming language&amp;hellip; That is, it is not new at all. But it is a surprisingly powerful approach nevertheless. That the source code is simply data. (cite the paper of mcCarthy)&lt;/p&gt;

&lt;p&gt;To provide insights into the system, we must first move away from one of the models that most of the people have in their mind: that of the separation of the source code and data. Usually the source code is in the IDE and the data is in the Database.&lt;/p&gt;

&lt;p&gt;However, every one of us, once we have taken a compiler construction course, knows that software is data too. Sure, it is a special kind of data, since it is very dense and non-repetitive. But still data after all.&lt;/p&gt;

&lt;p&gt;Once we look at the source code as pure data, we can start applying all the tools of data analytics. And these tools are:
- visualization and exploration
- clustering
- data mining
- &amp;hellip;&lt;/p&gt;

&lt;p&gt;Let us start with the beginning. Visualizing software systems.
Visualization is an important first step in any data analysis
context. The importance of this step in software analyitcs is
given by the longevity of the software visualization conference
which has been live and kicking for many years now.&lt;/p&gt;

&lt;h1 id=&#34;let-me-give-you-an-example-of-how-we-would-visualize-a-software-system&#34;&gt;Let me give you an example of how we would visualize a software system&lt;/h1&gt;

&lt;p&gt;Let me show you one way in which I like to visualize software that is based on two characteristics of software: it&amp;rsquo;s hierarchical structure and it&amp;rsquo;s dependency structure.&lt;/p&gt;

&lt;p&gt;Another one that I like, because I implemented it during
my PhD is this automatically generated  interactive visualization that is extracted directly from the source code. It shows modules in the system and dependencies between them. Visually, the size of the modules is proportional with the size of the modules. The width of the dependency relations is also proportional to the strength of the dependency.&lt;/p&gt;

&lt;p&gt;So if we look now at a system that I worked once on,  we can see that it is at the highest level structured as a collection of modules &amp;hellip; (discuss a bit about the modules and their relationshps)&lt;/p&gt;

&lt;p&gt;In software, we have something that very few other types of data have, and that is, we like to keep track of the evolution of our &amp;ldquo;data&amp;rdquo;. This is why, we can, look at a given system, in the context of it&amp;rsquo;s past.&lt;/p&gt;

&lt;h1 id=&#34;the-long-term-evolutionary-context&#34;&gt;The Long Term Evolutionary Context&lt;/h1&gt;

&lt;p&gt;But as manny lehman, argued, a system that does not change is dead. And a version of the system that we look at without taking into account its broader history is dead. In our case, if we augment our analysis with more context we can learn many useful things about this system.&lt;/p&gt;

&lt;p&gt;In fact, we often think about software systems in terms of their architecture. This is a very useful metaphor that serves us very well.&lt;/p&gt;

&lt;p&gt;At this point, I would like to suggest another metaphor, and that is, the metaphor of a plant. A plant is ever evolving. And you must take care of it, or it will die.&lt;/p&gt;

&lt;p&gt;So the first context that we have learned in our work that is important is the historical context. And just as the real history, if we take the long view, we must summarize heavily. But when we take the short term view, we can go into more details. And the two are useful for different goals. Take for example the long term view.&lt;/p&gt;

&lt;p&gt;If we look at the context, we see that some parts of a software system are evolving much more than the others. Knowing the long term evolutionary context in which the system became what it is, can help us steer it in the future.&lt;/p&gt;

&lt;h1 id=&#34;the-short-term-evolutionary-context&#34;&gt;The Short-Term Evolutionary Context&lt;/h1&gt;

&lt;p&gt;And just as the long term context can help us steer the system towards the long term future, the short term context can help us steer it towards the short term future. Quite obvious you&amp;rsquo;ll say. And you&amp;rsquo;d be right.&lt;/p&gt;

&lt;p&gt;This is what we showed with my colleague Lille Hattori at the Univerisy of Lugano, to which I contributed a little bit. In this case, the goal was to be able to replay past development sessions to give context to somebody trying to understand a piece of code.&lt;/p&gt;

&lt;p&gt;One of the ways in which this worked very well for us was &amp;hellip;&lt;/p&gt;

&lt;h1 id=&#34;the-very-long-term&#34;&gt;The Very Long Term?&lt;/h1&gt;

&lt;p&gt;&amp;ndash; I remember a keynote by a biologist &amp;hellip;
&amp;ndash; Who is looking at the very long view?
&amp;ndash; There is the work of Stewart Brand and the Long Now Foundation who are working on thinking really long term. What are the equivalent software projects? How do we ensure that our systems will be running 1000 years later?&lt;/p&gt;

&lt;h1 id=&#34;the-ecosystem-context&#34;&gt;The Ecosystem Context&lt;/h1&gt;

&lt;p&gt;No man is an island, entirely of itself says the poet John Donne.&lt;/p&gt;

&lt;p&gt;Any useful non-trivial system is part of a larger ecosystem.&lt;/p&gt;

&lt;p&gt;As Vernor Vinge says,&lt;/p&gt;

&lt;p&gt;And just as a sociologist, or a historian, when trying to understand somebody, they need to understand them in context, as a software analyst one must take the broader ecosystem in context. The system that we looked at earlier, if we zoom out we learn that is part of a larger ecosystem in which it interacts with other systems.&lt;/p&gt;

&lt;p&gt;This is the software context.&lt;/p&gt;

&lt;p&gt;Surely, we can zoom out even more and look at all the systems that are written in a given language. If we do that however, there are often challenges in extracting dependencies. And also the analysis can often become less reliable because it is hard to verify that the data is actually correct in some cases (can point to a later example with antarctica&amp;hellip;)&lt;/p&gt;

&lt;h1 id=&#34;the-social-context-of-an-ecosystem&#34;&gt;The Social Context of an Ecosystem&lt;/h1&gt;

&lt;p&gt;And then, there is the social context.&lt;/p&gt;

&lt;p&gt;This is the co&lt;/p&gt;

&lt;p&gt;Some organizational ecosystems can however be large. Google is famously storing all their code in one place.&lt;/p&gt;

&lt;p&gt;Some very interesting work can be done if we analyze an ecosystem in its broader context, and some very interesting statistics can be derived if we understand the ecosystem in itself.&lt;/p&gt;

&lt;p&gt;The ecosystem policies, the rules written or unwritten determine the long term survival of the ecosystem. E.g.
- the R community enforces all the published packages to depend on the latest version of every other package.
- At the opposite spectrum seems to me to be the Mathlab ecosystem, where reuse is based on some files on a website that can be downloaded. No version control. No history. No dependency management.
- the Google ecosystem has a billion lines of code that are available to everybody. You can load all the projects in eclipse. and in this huge forrest of projects, automated bots float around and make a large number of commits to the version repository.
- at the same time while Backward Inc. which employs thousands of software professionals can not reproduce an earlier version of their system in A.D. 2014
- tell me the rules of your ecosystem, and I can tell you whether it&amp;rsquo;s meant to be healthy or not.&lt;/p&gt;

&lt;p&gt;This is why designing the rules of the game for an ecosystem is a tricky business.
The examples I gave are large, huge, ecosystems that very few of us will ever start.&lt;/p&gt;

&lt;p&gt;But, on the other hand, even a smaller ecosystem requires a &amp;ldquo;constitution&amp;rdquo;, a basic set of rules by which it functions if it is to survive. And why would you want an ecosystem? Take for example one of the projects that I&amp;rsquo;ve started recently which aims to model the knowledge of a learner in order to help them improve. Learner tracing through a knowledge field. We want to track him in every place in which he encounters knowledge. But in the days in which everyone has so many devices in which one can interact with knowledge, tablets, phones, phablets, smartwatches, laptops, smart TVs, etc. it becomes increasingly unlikely that a single player can provide all the tracking. We thus need an ecosystem of independent players who can collaborate.
- what should the platform&lt;/p&gt;

&lt;h2 id=&#34;api-statistics&#34;&gt;&amp;ndash; API Statistics&amp;hellip;&lt;/h2&gt;

&lt;p&gt;API&lt;/p&gt;

&lt;p&gt;Take for example an API. You can look at it as much as you want, and you can analyze it in the context too, but as long as you don&amp;rsquo;t start to look at it in the broader Java ecosystem in which it is used there are things that you will never learn about it.&lt;/p&gt;

&lt;p&gt;For example, only if you look at the way the clients of the JDK, or the downstream as we call them use the JDK will you be able to learn about what are the most important parts of it. And if you did, you could probably improve the way documentation is being generated and code is being navigated.&lt;/p&gt;

&lt;p&gt;This is something that we did together with my colleague Boris. We augmented the documentation browser based on the usage of the APIs.&lt;/p&gt;

&lt;p&gt;This is a general problem, it does not happen only with the JDK. I am reminded of&lt;/p&gt;

&lt;p&gt;We once did a study on what are the developer needs in software ecosystems.&lt;/p&gt;

&lt;h2 id=&#34;the-knowledge-context&#34;&gt;&amp;ndash; The Knowledge Context&lt;/h2&gt;

&lt;p&gt;What about our metrics which talk about&lt;/p&gt;

&lt;h1 id=&#34;what-does-google-say-about-context&#34;&gt;What Does Google Say About Context?&lt;/h1&gt;

&lt;p&gt;The future is contextualization.&lt;/p&gt;

&lt;p&gt;take this system here:
- we look at it: looks quite simple and metrics look quite good (happy)
- a lot of dead code, code that is not used by any other part of the system (sad)
- we look at it&amp;rsquo;s evolution: it&amp;rsquo;s been evolving for years, refining, and refining: must be important.
- we look at the dependencies: a lot of dead code???  (sad)
- we zoom out in the organization - we see a system that everybody depends on (happy)(must be important)
- we look at the organization - it&amp;rsquo;s an organization which moves too fast, and people can not keep up, they make breaking changes &amp;hellip; so, it&amp;rsquo;s going to be hard to keep up. do we want (sad)
- still, the community has been supporting this project and similar ones for many years, and we can trust that they will do it in the future. (happy)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>🎉 Nominated for the Teacher of the Year Award</title>
      <link>https://mircealungu.github.io/post/16-11-20-teacher-of-the-year/</link>
      <pubDate>Mon, 21 Nov 2016 12:00:00 +0000</pubDate>
      
      <guid>https://mircealungu.github.io/post/16-11-20-teacher-of-the-year/</guid>
      <description>&lt;p&gt;I have been nominated for the teacher of the year award!
Especially after seeing all the other nominations I started
feeling like I don&amp;rsquo;t deserve the honor. However, it is also
true that together with my team, we put a lot of effort in
  coming up with cool project ideas and
  running them
in the timespan of five months.&lt;/p&gt;

&lt;p&gt;Thus, many thanks and congratulations for my teaching assistants:
Laura Baakman,
Jeroen Brandsma,
Georgios Digkas,
Sybren Gjaltema,
Jelle van Wezel,
Angelo Karountzos,
Alexander Lukjanenkovs.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been long due to write up the lessons learned during
the most recent software engineering courses.
Now I feel the duty to do it even more.
Hopefully before I start the next batch!&lt;/p&gt;

&lt;p&gt;And now for the impossible challenge: can you spot me in the picture?
&lt;img src=&#34;https://mircealungu.github.io/img/teacher.jpg&#34; alt=&#34;lala&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Polite Programmers, Use Sentence Case 📝</title>
      <link>https://mircealungu.github.io/post/16-11-20-polite-smalltalk-at-nool/</link>
      <pubDate>Sun, 20 Nov 2016 12:00:00 +0000</pubDate>
      
      <guid>https://mircealungu.github.io/post/16-11-20-polite-smalltalk-at-nool/</guid>
      <description>&lt;p&gt;The programming languages reseachers have a healthy sense of humor. The -1th edition of the NOOL (New Object Oriented Languages) Workshop had a very creative call for papers. To keep up with the state of affairs, Jan Kurs and I submitted a paper with a most concise abstract:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;JavaProgrammersUseCamelCaseToSeparateWordsInIdentifiers. &lt;br/&gt;
   Pythonistas_and_others_use_underscore_in_their_identifiers. &lt;br/&gt;
   Polite programmers can use spaces if they like.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The paper presents briefly some of the design decisions that went into Polite, our evolutionary mutation of Smalltalk that brings the language
closer to natural language. (&lt;a href=&#34;https://github.com/mircealungu/Polite_Programmers__NOOL16/blob/master/preprint.pdf&#34;&gt;preprint is online&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Further Work on Polite Smalltalk:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To try out Polite Smalltalk, &lt;a href=&#34;https://zenodo.org/record/61578#.WDYtDKIrKXQ&#34;&gt;Download the latest release from Zenodo&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>New Course: Introduction to Data Science</title>
      <link>https://mircealungu.github.io/post/16-11-16-introduction-to-data-science-course/</link>
      <pubDate>Wed, 16 Nov 2016 12:00:00 +0000</pubDate>
      
      <guid>https://mircealungu.github.io/post/16-11-16-introduction-to-data-science-course/</guid>
      <description>&lt;p&gt;Today, with &lt;a href=&#34;http://www.cs.rug.nl/~kbunte/&#34;&gt;Kerstin Bunte&lt;/a&gt;,
we are starting our new course on Introduction to Data Science.
This will be interesting:
we have 60 first year master students from
  computer science,
  astronomy, and
  mathematics.
What do they have
in common? What topics can we cover such that most of them can
benefit? Which topics are not too easy nor too challenging? We&amp;rsquo;ll see!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bootstrapping an Ecosystem 📝</title>
      <link>https://mircealungu.github.io/post/16-09-20-bootstrapping-an-ubiquitous-ecosystem/</link>
      <pubDate>Tue, 20 Sep 2016 12:00:00 +0000</pubDate>
      
      <guid>https://mircealungu.github.io/post/16-09-20-bootstrapping-an-ubiquitous-ecosystem/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;An unconventional idea for an ecosystem, which shows well that there are many more opportunities to benefit from the ecosystem idea, than the various industrial applications. The concrete examples of the platform and the applications make the ideas tangible and well understandable. I particularly like the discussions of the lessons learned [&amp;hellip;]&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This was a very nice review to read.&lt;/p&gt;

&lt;p&gt;The other reviews were also positive, so the paper on Bootstrapping a Ubiquitous Monitoring Ecosystem (&lt;a href=&#34;https://github.com/mircealungu/Bootstrapping_an_Ecosystem__WEA16/blob/master/preprint.pdf&#34;&gt;preprint online&lt;/a&gt;) was accepted for presentation at WEA (Workshop on Ecosystem Architectures) that will take place in Copenhagen and is colocated with ECSA.&lt;/p&gt;

&lt;p&gt;The paper talks about some of the challenges and
opportunities that come with bootstrapping a
ubiquitous monitoring ecosystem. It is a case
study inspired from our &lt;a href=&#34;https://zeeguu.unibe.ch&#34;&gt;Zeeguu&lt;/a&gt; ecosystem.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Evolutionary and Collaborative Software Architecture Recovery 📝</title>
      <link>https://mircealungu.github.io/post/14-01-01-evolutionary-and-collaborative-software-architecture-recovery/</link>
      <pubDate>Wed, 01 Jan 2014 12:00:00 +0000</pubDate>
      
      <guid>https://mircealungu.github.io/post/14-01-01-evolutionary-and-collaborative-software-architecture-recovery/</guid>
      <description>

&lt;p&gt;Our work on Softwarenaut has finally been published in the Science
of Computer Programming. The paper
(&lt;a href=&#34;http://scg.unibe.ch/archive/papers/Lung14a.pdf&#34;&gt;pdf&lt;/a&gt;, &lt;a href=&#34;http://scg.unibe.ch/scgbib?query=lung14a&amp;amp;display=bibtex&#34;&gt;bibtex&lt;/a&gt;,&lt;a href=&#34;https://scholar.google.nl/scholar?cites=16074008290934254937&amp;amp;as_sdt=2005&amp;amp;sciodt=0,5&amp;amp;hl=en&#34;&gt;citations&lt;/a&gt;)
introduces Softwarenaut, a visual, interactive architecture recovery tool which
leverages evolutionary analysis to support source code understanding.&lt;/p&gt;

&lt;p&gt;This page contains a very high level description of the tool.
For details and case studies, see&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;the journal article that describes the tool (&lt;a href=&#34;http://scg.unibe.ch/archive/papers/Lung14a.pdf&#34;&gt;preprint pdf&lt;/a&gt;, &lt;a href=&#34;http://scg.unibe.ch/scgbib?_k=mhZxW1Pf&amp;amp;query=Lung14a&amp;amp;display=bibtex&#34;&gt;bibtex&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;the conference paper that describes the way we visualized hierarchical clusterings of software systems (&lt;a href=&#34;http://scg.unibe.ch/archive/papers/Lung05aExploreSemanticClusters.pdf&#34;&gt;preprint pdf&lt;/a&gt;, &lt;a href=&#34;http://scg.unibe.ch/scgbib?_k=v0zYApEK&amp;amp;query=Lung05a&amp;amp;display=bibtex&#34;&gt;bibtex&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;aggregating-low-level-relations-along-a-hierarchical-decomposition-of-a-system&#34;&gt;Aggregating low-level relations along a hierarchical decomposition of a system&lt;/h3&gt;

&lt;p&gt;Softwarenaut aggregates low-level relations along a hierarcical decomposition of a system (e.g. the package structure in Java). Softwarenaut can thus present a high-level overview of the architectural relationships between the modules in a system.&lt;/p&gt;

&lt;p&gt;The figure presents the architecture of Softwarenaut visualized in Softwarenaut. The module sizes are proportional to their LOC and the relationships are proportional to the number of low-level relationships abstracted.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/464519/21022444/eb463a12-bd7c-11e6-9a37-f6925f371eff.png&#34; alt=&#34;architecture-of-softwarenaut&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;augmenting-the-big-picture-with-evolutionary-information&#34;&gt;Augmenting The Big Picture With Evolutionary Information&lt;/h3&gt;

&lt;p&gt;The following view presents Softwarenaut visualizing itself but this time, augmenting the structure with evolutionary information. On top of the architectural view we have highlighted the classes that have the most activity in the recent evolution of the system (as of February 2011). One can see that it is a minority of classes that have been changing.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/464519/21022349/9ec2f748-bd7c-11e6-87ad-29c5332caba9.png&#34; alt=&#34;evolution screenshot&#34; /&gt;&lt;/p&gt;

&lt;!-- ### Details About Relationship Evolution

The following figure presents the evolution filmstrip for the relationship between the uml and kernel modules in ArgoUML between 2003 and 2007. Inheritance relationships are represented with red and invocation relationships are represented with black. One can see that in 2004 a reverse dependency was introduced between kernel and uml and it remained in the system until its latest analyzed version

![screen-shot-2011-10-10-at-5 27 36-pm](https://cloud.githubusercontent.com/assets/464519/21023545/4c41a97e-bd81-11e6-81b1-fb038bd3b156.png)
 --&gt;

&lt;h3 id=&#34;details-about-module-evolution&#34;&gt;Details About Module Evolution&lt;/h3&gt;

&lt;p&gt;There are mahy module detail views which present information about a particular module. The Module Evolution presents a compressed version of the module history. The module is represented in every analyzed version as a treemap. When a new class is introduced it is marked with yellow. When a class changes it is colored with a shade of blue which is darker for larger changes. The figure presents the history of the cognitive package in ArgoUML.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/464519/21023626/9cffc058-bd81-11e6-906f-4f62c440717a.png&#34; alt=&#34;screen-shot-2011-10-14-at-1 56 14-am&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;coping-with-the-explosion-of-information-through-filtering&#34;&gt;Coping with the explosion of information through filtering&lt;/h3&gt;

&lt;p&gt;Filters help coping with the explosion of information during exploration. There are two types of filters: entity filters and relationship filters. The Filters Panel allows the user to add and remove various filters during exploration. The filters panel appears instead of the Detail Panel when no entity is selected in the Architectural View.&lt;/p&gt;

&lt;p&gt;Two categories of &lt;strong&gt;entity filters&lt;/strong&gt; are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Size Related: Filters all the modules that are under a certain threshold (Small Modules) or above a certain threshold (Large modules).&lt;/li&gt;
&lt;li&gt;Evolution Related:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Two categories of &lt;strong&gt;relationship filters&lt;/strong&gt; are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dependency Strength: they filters the relationships based on the number of low-level explicit relationships that are abstracted in the visible relationships (e.g. Weak dependencies, Strong dependencies). These are useful when starting the analysis of systems that have a large number of modules and dependencies between them.&lt;/li&gt;
&lt;li&gt;Evolutionary: they filter relationships based on the evolution of the relationships during the lifetime of the system. Examples are: lifetime, newborn, old, new. They are available only when multiple versions of a system are loaded. They are useful for either limiting the amount of information at the first encounter with a system (e.g. lifetime) or trying to find problems (e.g. newborn combined with bidirectional).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;a-screencast-of-softwarenaut-in-action&#34;&gt;A Screencast of Softwarenaut in Action&lt;/h3&gt;

&lt;p&gt;In 2012 I prepared a screencast of the way the
tool looked at the time. I think screencasts are very important
for research tools since they may give ideas to new toolmakers
long after they tool does not compile anymore :)&lt;/p&gt;

&lt;iframe src=&#34;https://player.vimeo.com/video/62767181&#34; width=&#34;640&#34; height=&#34;360&#34; frameborder=&#34;0&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;h3 id=&#34;further-reading&#34;&gt;Further Reading&lt;/h3&gt;

&lt;p&gt;For details and case studies, see&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;the journal article that describes the tool (&lt;a href=&#34;http://scg.unibe.ch/archive/papers/Lung14a.pdf&#34;&gt;preprint pdf&lt;/a&gt;, &lt;a href=&#34;http://scg.unibe.ch/scgbib?_k=mhZxW1Pf&amp;amp;query=Lung14a&amp;amp;display=bibtex&#34;&gt;bibtex&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;the conference paper that describes the way we visualized hierarchical clusterings of software systems (&lt;a href=&#34;http://scg.unibe.ch/archive/papers/Lung05aExploreSemanticClusters.pdf&#34;&gt;preprint pdf&lt;/a&gt;, &lt;a href=&#34;http://scg.unibe.ch/scgbib?_k=v0zYApEK&amp;amp;query=Lung05a&amp;amp;display=bibtex&#34;&gt;bibtex&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;code-and-installation&#34;&gt;Code and Installation&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/mircealungu/Softwarenaut/&#34;&gt;Softwarenaut GitHub repo&lt;/a&gt; contains instructions on how to &lt;a href=&#34;https://github.com/mircealungu/Softwarenaut/blob/master/INSTALL.md&#34;&gt;obtain the code
and install the system&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mapping the Open Information Economy 📝</title>
      <link>https://mircealungu.github.io/post/13-09-01-visualizing-stack-overflow/</link>
      <pubDate>Wed, 20 Nov 2013 12:00:00 +0000</pubDate>
      
      <guid>https://mircealungu.github.io/post/13-09-01-visualizing-stack-overflow/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://mircealungu.github.io/img/stackoverflow.png&#34; alt=&#34;visualizing-stack-overflow&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;&amp;ldquo;A nobel prize is waiting for the one who visualizes the economy
of information&amp;rdquo;&lt;/b&gt; (Steward Brand, The Media Lab)&lt;/p&gt;

&lt;p&gt;One of my current travelling companions is “The Media Lab – Inventing the Future at MIT” by Steward Brand. Like several other books about the history of computing in the 80s, this one is also fascinating and it shows again how much ahead of their time were people in those years… and how we are still reaping the ideas that they saw. The book reports on an anecdote by Harlan Cleveland :&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“I have wanted for some time to find a map of information flows around the world. The other day I had one hour to kill between appointments in new york city, so I dropped into the Rand-McNally shop to ask for such a map. My request created quite a stir, and virtually every employee was called into consultation. They brought out all sorts of maps showing flows of food and feedgrains, oil and coal, weapons and manufacturers – but finally admitted that they had no map of information flows and didn’t think their competitors had one either.” (Steward Brand, Inventing the Future at MIT, pp. 245)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;can-we-make-a-map-of-information-flow-in-the-world-today&#34;&gt;Can we make a map of information flow in the world today?&lt;/h3&gt;

&lt;p&gt;Yes we can! In the article that we will present at SSE in Saint Petersburg this summer we show how can we do it for software engineering based on StackOverflow data.&lt;/p&gt;

&lt;p&gt;StackOverflow is the principal website for software engineers in search for answers to programming questions. The quality of the answers and the fact that the mean time to a question being answered is 11 minutes make it the &lt;em&gt;de facto market for information&lt;/em&gt; regarding programming.&lt;/p&gt;

&lt;p&gt;In the StackOverflow information market the currency is &lt;em&gt;reputation points&lt;/em&gt;. The reputation points are offered by the user originating a question to the one that best answers it. Others who found the answer useful can provide further points by upvoting the answer later.&lt;/p&gt;

&lt;p&gt;As data source for our map we use ten million questions and answers (published as a database dump by A. Bacchelli at U. Lugano). Among other things the data source contains also geolocation information for a large percentage of the the users. Thus, if we aggregate the exchanges of information to geographical regions we will obtain a map.&lt;/p&gt;

&lt;h3 id=&#34;how-to-visualize-the-map&#34;&gt;How to &lt;em&gt;visualize&lt;/em&gt; the map?&lt;/h3&gt;

&lt;p&gt;Inspired from our earlier work on
    &lt;a href=&#34;https://mircealungu.github.io/post/14-01-01-evolutionary-and-collaborative-software-architecture-recovery/&#34;&gt;visualizing software&lt;/a&gt;
we used the following conventions for visualizing our information map:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The areas of countries and continents is proportional to the reputation of their users&lt;/li&gt;
&lt;li&gt;The thickness of an arrow indicating information flow (answers) between regions is proportional to the number of answers abstracted in it&lt;/li&gt;
&lt;li&gt;Where we had sufficient space, we labelled countries with their corresponding flags&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This map of software engineering information flow in the paper looks like the figure below:&lt;/p&gt;

&lt;div style=&#34;margin: 0 -48%; padding: 0 -48%;&#34;&gt;
    &lt;img src=&#34;https://mircealungu.github.io/img/stackoverflow-full.png&#34; /&gt;
&lt;/div&gt;

&lt;h3 id=&#34;what-can-we-learn&#34;&gt;What can we learn?&lt;/h3&gt;

&lt;p&gt;The most straightforward observations based on this map are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;EU is exporting more answers to the US than the other way around!&lt;/li&gt;
&lt;li&gt;However, US has more reputation than EU&lt;/li&gt;
&lt;li&gt;Several small countries like Switzerland or Netherland have disproportionately high reputation with respect to their population&lt;/li&gt;
&lt;li&gt;China is practically absent even if Joel Spolsky (the founder of SO) &lt;a href=&#34;https://stackoverflow.blog/2011/04/stack-overflow-around-the-world/&#34;&gt;reports&lt;/a&gt; large numbers of visitors to the site from there&lt;/li&gt;
&lt;li&gt;Africa does not contribute much&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;what-next&#34;&gt;What next?&lt;/h3&gt;

&lt;p&gt;The map is taken from our paper (&lt;a href=&#34;http://scg.unibe.ch/archive/papers/Sche13a-GeolocatingStackOverflow.pdf&#34;&gt;pdf&lt;/a&gt;, &lt;a href=&#34;http://scg.unibe.ch/scgbib?_k=dvvBNH0e&amp;amp;query=Sche13a&amp;amp;display=bibtex&#34;&gt;Bibtex&lt;/a&gt;) which contains more details about the data collection and analysis (including details on geo-locating users, and the evolution over time of the data).&lt;/p&gt;

&lt;p&gt;Is the map representative of the way programming information is spread around the world? Are there other similar maps that you are aware of?&lt;/p&gt;

&lt;p&gt;If you want to talk more about this topic &lt;a href=&#34;https://mircealungu.github.io/#contact&#34;&gt; let me know&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;possible-student-project&#34;&gt;Possible Student Project&lt;/h3&gt;

&lt;p&gt;There are a few very nice ways in which this work could be continued. A student interested in working on this topic for a thesis should &lt;a href=&#34;https://mircealungu.github.io/#contact&#34;&gt; contact me&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Keynote at Smalltalks in Argentina</title>
      <link>https://mircealungu.github.io/post/12-11-11-keynote-smalltalks-argentina/</link>
      <pubDate>Tue, 20 Nov 2012 12:00:00 +0000</pubDate>
      
      <guid>https://mircealungu.github.io/post/12-11-11-keynote-smalltalks-argentina/</guid>
      <description>&lt;p&gt;&lt;img src=/img/ar-teaching.jpg style=&#34;box-shadow:none; float: left; width:210px; padding: 10px; padding-top:0px; margin-top: 0px; margin-left: 0px; padding-left: 0px; margin-bottom: 0px; border-width: 0px;&#34; /&gt;
&lt;img src=/img/ar-talking.jpg style=&#34;box-shadow:none; float: left; width:210px; padding: 10px; padding-top:0px; margin-top: 0px; margin-left: 0px; padding-left: 0px; margin-bottom: 0px; border-width: 0px;&#34; /&gt;
&lt;img src=/img/ar-enjoying.jpg style=&#34;box-shadow:none; float: left; width:210px; padding: 10px; padding-top:0px; margin-top: 0px; margin-left: 0px; padding-left: 0px; margin-bottom: 0px; border-width: 0px;&#34; /&gt;
&lt;div  style=&#34;clear:both;&#34;&gt;&lt;/div&gt;
&lt;small&gt;
&lt;/small&gt;
I was invited to give a keynote at Smalltalks in Argentina. Before the conference I spent some time with students at the University of Buenos Aires with Gabriela Arevallo and the other organizers of the conference. The conference was great. The argentinian Smalltalk community is extremely welcoming and passionate. I look forward to going back one day.
&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
